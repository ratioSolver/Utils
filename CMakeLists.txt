cmake_minimum_required(VERSION 3.5.0)
project(utils VERSION 0.2.0 LANGUAGES CXX)
set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fsanitize=undefined")

include(CTest)
enable_testing()

set(INT_TYPES "int" "long" "long long")
set(INT_TYPE "long" CACHE STRING "Integer type")
set_property(CACHE INT_TYPE PROPERTY STRINGS ${INT_TYPES})
list(FIND INT_TYPES ${INT_TYPE} INT_TYPE_INDEX)
if(${INT_TYPE_INDEX} EQUAL -1)
    message(FATAL_ERROR "Invalid integer type: ${INT_TYPE}")
endif()

set(VARIABLE_TYPES "unsigned int" "unsigned long")
set(VARIABLE_TYPE "unsigned long" CACHE STRING "Variable type")
set_property(CACHE VARIABLE_TYPE PROPERTY STRINGS ${VARIABLE_TYPES})
list(FIND VARIABLE_TYPES ${VARIABLE_TYPE} VARIABLE_TYPE_INDEX)
if(${VARIABLE_TYPE_INDEX} EQUAL -1)
    message(FATAL_ERROR "Invalid variable type: ${VARIABLE_TYPE}")
endif()

set(LOGGING_LEVELS "TRACE" "DEBUG" "INFO" "WARN" "ERROR" "FATAL")
set(LOGGING_LEVEL "INFO" CACHE STRING "Logging level")
set_property(CACHE LOGGING_LEVEL PROPERTY STRINGS ${LOGGING_LEVELS})
list(FIND LOGGING_LEVELS ${LOGGING_LEVEL} LOGGING_LEVEL_INDEX)
if(${LOGGING_LEVEL_INDEX} EQUAL -1)
    message(FATAL_ERROR "Invalid logging level: ${LOGGING_LEVEL}")
endif()

if(LOGGING_LEVEL STREQUAL "TRACE")
    set(LOG_LEVEL 6)
elseif(LOGGING_LEVEL STREQUAL "DEBUG")
    set(LOG_LEVEL 5)
elseif(LOGGING_LEVEL STREQUAL "INFO")
    set(LOG_LEVEL 4)
elseif(LOGGING_LEVEL STREQUAL "WARN")
    set(LOG_LEVEL 3)
elseif(LOGGING_LEVEL STREQUAL "ERROR")
    set(LOG_LEVEL 2)
elseif(LOGGING_LEVEL STREQUAL "FATAL")
    set(LOG_LEVEL 1)
endif()

message(STATUS "Integer type: ${INT_TYPE}")
message(STATUS "Variable type: ${VARIABLE_TYPE}")
message(STATUS "Logging level: ${LOGGING_LEVEL}")

add_library(utils src/rational.cpp src/inf_rational.cpp src/lin.cpp src/tableau.cpp src/timer.cpp)
target_compile_features(utils PUBLIC cxx_std_17)
target_include_directories(utils PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>)
target_compile_definitions(utils PUBLIC INT_TYPE=${INT_TYPE} VARIABLE_TYPE=${VARIABLE_TYPE} LOGGING_LEVEL=${LOG_LEVEL})

if(BUILD_TESTING)
    add_subdirectory(tests)
endif()

if(MSVC)
    target_compile_options(utils PRIVATE /W4)
else()
    target_compile_options(utils PRIVATE -Wall -Wextra -Wpedantic)
    if (ENABLE_COVERAGE)
        if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
            target_compile_options(utils PRIVATE --coverage)
            target_link_libraries(utils PUBLIC gcov)
        endif()
    endif()
endif()

set(CPACK_PROJECT_NAME utils)
set(CPACK_PROJECT_VERSION ${PROJECT_VERSION})
include(CPack)
